#
# Check for:
#
# - ControlPlane
# - VMSet
# - VirtualMachine
# - OpenStackClient
# - OvercloudNet (IP reservations)
# - OvercloudIpSet
#

apiVersion: osp-director.openstack.org/v1beta1
kind: ControlPlane
metadata:
  name: overcloud
  namespace: openstack
spec:
  controller:
    Role: Controller
    baseImageURL: http://download.eng.brq.redhat.com/brewroot/packages/rhel-guest-image/8.3/417/images/rhel-guest-image-8.3-417.x86_64.qcow2
    baseImageVolumeName: openstack-base-img
    controllerCount: 1
    cores: 2
    diskSize: 50
    memory: 20
    networks:
    - ctlplane
    ospNetwork:
      bridgeName: br-osp
      desiredState:
        interfaces:
        - bridge:
            options:
              stp:
                enabled: false
            port:
            - name: enp6s0
          description: Linux bridge with enp6s0 as a port
          name: br-osp
          state: up
          type: linux-bridge
      name: osp
    role: controller
    storageClass: host-nfs-storageclass
  openStackClientImageURL: quay.io/openstack-k8s-operators/tripleo-deploy:latest
---
apiVersion: osp-director.openstack.org/v1beta1
kind: VMSet
metadata:
  name: controller
  namespace: openstack
spec:
  baseImageURL: http://download.eng.brq.redhat.com/brewroot/packages/rhel-guest-image/8.3/417/images/rhel-guest-image-8.3-417.x86_64.qcow2
  baseImageVolumeName: openstack-base-img
  cores: 2
  deploymentSSHSecret: osp-controlplane-ssh-keys
  diskSize: 50
  memory: 20
  networks:
  - ctlplane
  ospNetwork:
    bridgeName: br-osp
    desiredState:
      interfaces:
      - bridge:
          options:
            stp:
              enabled: false
          port:
          - name: enp6s0
        description: Linux bridge with enp6s0 as a port
        name: br-osp
        state: up
        type: linux-bridge
    name: osp
  role: controller
  storageClass: host-nfs-storageclass
  vmCount: 1
status:
  baseImageDVReady: true
  vmHosts:
    controller-0:
      hostname: controller-0
      # VMSet VMs and their associated OpenstackClient Pod acquire IPs nondeterministically,
      # so we cannot check this here
      #ipaddress: 192.168.25.100/24
---
apiVersion: kubevirt.io/v1alpha3
kind: VirtualMachine
metadata:
  annotations:
    k8s.v1.cni.cncf.io/networks: openstack/osp
    kubevirt.io/latest-observed-api-version: v1alpha3
    kubevirt.io/storage-observed-api-version: v1alpha3
  labels:
    app: osp-vmset
    cr: controller
    osp-director.openstack.org/name: controller
    osp-director.openstack.org/namespace: openstack
    owner: osp-director
  name: controller-0
  namespace: openstack
spec:
  dataVolumeTemplates:
  - metadata:
      namespace: openstack
    spec:
      pvc:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: host-nfs-storageclass
        volumeMode: Filesystem
      source:
        pvc:
          name: openstack-base-img
          namespace: openstack
  running: true
  template:
    metadata:
      creationTimestamp: null
      labels:
        kubevirt.io/vm: controller-0
        vmsets.osp-director.openstack.org/ospcontroller: "True"
    spec:
      domain:
        cpu:
          cores: 2
        devices:
          disks:
          - disk:
              bus: virtio
            name: rootdisk
          - disk:
              bus: virtio
            name: cloudinitdisk
          interfaces:
          - masquerade: {}
            model: virtio
            name: default
          - bridge: {}
            name: osp
          networkInterfaceMultiqueue: true
          rng: {}
        machine:
          type: pc-q35-rhel8.2.0
        resources:
          requests:
            memory: 20Gi
      evictionStrategy: LiveMigrate
      hostname: controller-0
      networks:
      - name: default
        pod: {}
      - multus:
          networkName: osp
        name: osp
      terminationGracePeriodSeconds: 0
      volumes:
      - name: rootdisk
      - cloudInitNoCloud:
          networkDataSecretRef:
            name: controller-controller-0-networkdata
          secretRef:
            name: controller-cloudinit
        name: cloudinitdisk
status:
  conditions:
  - status: "True"
    type: Ready
  created: true
  ready: true
---
apiVersion: osp-director.openstack.org/v1beta1
kind: OpenStackClient
metadata:
  name: openstackclient
  namespace: openstack
spec:
  cloudName: overcloud
  deploymentSSHSecret: osp-controlplane-ssh-keys
  hostAliases:
  - hostnames:
    - controller-0
  imageURL: quay.io/openstack-k8s-operators/tripleo-deploy:latest
  networks:
  - ctlplane
status:
  hostname: openstackclient-0
  # VMSet VMs and their associated OpenstackClient Pod acquire IPs nondeterministically,
  # so we cannot check this here
  #ipaddress: 192.168.25.101/24
---
# Check for OvercloudNet twice due to IP assignment nondeterminism
apiVersion: osp-director.openstack.org/v1beta1
kind: OvercloudNet
metadata:
  name: ctlplane
  namespace: openstack
status:
  reservations:
  - hostname: controller-0
  - hostname: openstackclient-0
---
apiVersion: osp-director.openstack.org/v1beta1
kind: OvercloudNet
metadata:
  name: ctlplane
  namespace: openstack
status:
  reservations:
  - ip: 192.168.25.100
  - ip: 192.168.25.101
---
apiVersion: osp-director.openstack.org/v1beta1
kind: OvercloudIPSet
metadata:
  labels:
    addToPredictableIPsLabel: "true"
  name: controller
  namespace: openstack
spec:
  hostCount: 1
  networks:
  - ctlplane
  role: controller
status:
  # VMSet VMs and their associated OpenstackClient Pod acquire IPs nondeterministically,
  # so we cannot check this here
  # hosts:
  #   controller-0:
  #     ipaddresses:
  #       ctlplane: 192.168.25.100/24
  networks:
    ctlplane:
      allocationEnd: 192.168.25.250
      allocationStart: 192.168.25.100
      cidr: 192.168.25.0/24
      gateway: 192.168.25.1
---
apiVersion: osp-director.openstack.org/v1beta1
kind: OvercloudIPSet
metadata:
  labels:
    addToPredictableIPsLabel: "false"
  name: openstackclient
  namespace: openstack
spec:
  hostCount: 1
  networks:
  - ctlplane
  role: OpenstackClient
status:
  # VMSet VMs and their associated OpenstackClient Pod acquire IPs nondeterministically,
  # so we cannot check this here
  # hosts:
  #   openstackclient-0:
  #     ipaddresses:
  #       ctlplane: 192.168.25.101/24
  networks:
    ctlplane:
      allocationEnd: 192.168.25.250
      allocationStart: 192.168.25.100
      cidr: 192.168.25.0/24
      gateway: 192.168.25.1
